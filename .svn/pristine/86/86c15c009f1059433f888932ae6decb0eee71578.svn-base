package kr.or.ddit.personnel.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.security.Principal;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.common.vo.CnthxVO;
import kr.or.ddit.common.vo.DeptVO;
import kr.or.ddit.common.vo.EmpVO;
import kr.or.ddit.personnel.service.MemberService;
import kr.or.ddit.vo.AsgmtVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/personnel")
@Controller
public class PpController {
	
	@Autowired
	MemberService ppservice;
	
	

	
	// 사원 리스트 조회 컨트롤러
	@GetMapping("/emp")
	public String ph(Model model) {
		
		
		List<EmpVO> emplist = ppservice.empList();
		
		
		model.addAttribute("emplist",emplist);
		log.info("리스트"+model);
				
				
		return"hrm/personnelHome";
	}
	
//    @GetMapping("/edate")
//    public String edateEmp(Model model) {
//    	LocalDate currentDate = LocalDate.now();
//
//        // 10일 이내로 종료되는 사원 리스트 가져오기
//        List<CnthxVO> expiringEmployees = ppservice.eDateEmp(currentDate, currentDate.plusDays(10));
//        log.info("데이터야 들어와 ㅠㅜㅠㅜ"+expiringEmployees);
//        // Date 타입을 LocalDate로 변환
//        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
//        for (CnthxVO cnthxVO : expiringEmployees) {
//            Date contractEndDate = cnthxVO.getBlctEdate();
//            Date salaryContractEndDate = cnthxVO.getBwctEdate();
//            
//            // Date 타입을 LocalDate로 변환
//            LocalDate contractEndLocalDate = LocalDate.parse(sdf.format(contractEndDate));
//            LocalDate salaryContractEndLocalDate = LocalDate.parse(sdf.format(salaryContractEndDate));
//            
//
//            
//         // LocalDate를 Date로 변환
//            Date contractEndDate1 = Date.from(contractEndLocalDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
//            Date salaryContractEndDate1 = Date.from(salaryContractEndLocalDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
//
//            // cnthxVO에 Date를 설정
//            cnthxVO.setBlctEdate(contractEndDate1);
//            cnthxVO.setBwctEdate(salaryContractEndDate1);
//        }
//
//        log.info("데이터야 들어와 !!!!"+expiringEmployees);
//        // 모델에 데이터 추가
//        model.addAttribute("expiringEmployees", expiringEmployees);
//        return "hrm/edate"; // JSP 페이지 이름
//    }
	
    @GetMapping("/edate")
    public ResponseEntity<List<CnthxVO>> edateEmp() {
        LocalDate currentDate = LocalDate.now();

        // 10일 이내로 종료되는 사원 리스트 가져오기
        List<CnthxVO> edateMb = ppservice.eDateEmp(currentDate, currentDate.plusDays(10));

        // Date 타입을 LocalDate로 변환
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        for (CnthxVO cnthxVO : edateMb) {
            Date contractEndDate = cnthxVO.getBlctEdate();
            
            // Date 타입을 LocalDate로 변환
            LocalDate contractEndLocalDate = LocalDate.parse(sdf.format(contractEndDate));
            
            // LocalDate를 Date로 변환
            Date contractEndDate1 = Date.from(contractEndLocalDate.atStartOfDay(ZoneId.systemDefault()).toInstant());

            // cnthxVO에 Date를 설정
            cnthxVO.setBlctEdate(contractEndDate1);
        }

        return ResponseEntity.ok(edateMb);
    }
    @GetMapping("/edate1")
    public ResponseEntity<List<CnthxVO>> edateEmp1() {
    	LocalDate currentDate = LocalDate.now();
    	
    	// 10일 이내로 종료되는 사원 리스트 가져오기
    	List<CnthxVO> edateMb1 = ppservice.eDateEmp(currentDate, currentDate.plusDays(10));
    	
    	// Date 타입을 LocalDate로 변환
    	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    	for (CnthxVO cnthxVO : edateMb1) {
    		Date salaryContractEndDate = cnthxVO.getBwctEdate();
    		
    		// Date 타입을 LocalDate로 변환
    		LocalDate salaryContractEndLocalDate = LocalDate.parse(sdf.format(salaryContractEndDate));
    		
    		// LocalDate를 Date로 변환
    		Date salaryContractEndDate1 = Date.from(salaryContractEndLocalDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
    		
    		// cnthxVO에 Date를 설정
    		cnthxVO.setBwctEdate(salaryContractEndDate1);
    	}
    	
    	return ResponseEntity.ok(edateMb1);
    }
	
	
	
	//사원전체 엑셀파일로 다운로드
    @PostMapping("/downloadExcel")
    @ResponseBody
    public String downloadExcel(HttpServletResponse response) {
        // 서비스를 통해 직원 데이터를 가져옴
        List<EmpVO> employeeList = ppservice.empList();

        log.info("데이터 잘 받아왔냐?"+employeeList);
        // 엑셀 파일 생성
        String filePath = "D:/insightFile/employee_list.xlsx";
        ppservice.generateExcelFile(employeeList, filePath, response);

       
        return "/insightFile/employee_list.xlsx";
    }
	
	
	// 계약상태 리스트 컨트롤러
	@ResponseBody   // 아작스 사용시 필요
	@GetMapping("/empA")
	public List<EmpVO> ph1() {
		List<EmpVO> emplist = ppservice.empList();		
		log.info("리스트"+emplist);		
		return emplist;
	}

		
	// 사원추가화면 컨트롤러
	@GetMapping("/empadd")
	public String empAdd(Model model) {
		
		return"hrm/empAdd";
	}

	//사원추가하기 컨트롤러
	@ResponseBody
	@PostMapping("/empadd")
	public String empAdd2(EmpVO empVO) {
		log.info("empAdd2->empVO : " + empVO);
		
		CnthxVO cnthxVO = empVO.getCnthxVOList();
		cnthxVO.setEmpNo(empVO.getEmpNo());
		
	    log.info("EmpVO야 제발 데이터야 들어와 : " + empVO, cnthxVO);

	    int result = this.ppservice.insertEMP(empVO, cnthxVO);
	    log.info("empAdd2 제대로 맵핑좀 되라 : " + result);

	    String rslt = "success";
	    if(result == 0) {
	    	rslt = "fail";
	    }
	    
	    //forwarding

	    return rslt; // 여기에서 적절한 응답을 반환하도록 수정
	}
	
	//인사발령 페이지 이동
	@GetMapping("/Appointments")
	public String Appointments(Principal principal, Model model) {
	        log.info("쳌쳌, 사용자 이름: " + principal.getName());
	        String empNo  = principal.getName();
	        
	        List<AsgmtVO> asgmtVOlist = ppservice.asgmtlist();

	        log.info("체크리스트 " + asgmtVOlist );
	        
	        model.addAttribute("asgmtVOlist", asgmtVOlist);
	        model.addAttribute("empNo", empNo);
	        

		return "hrm/Appointments";
	}
	
	//인사발령 수정 페이지 이동
	@PostMapping("/Appointmentset")
	public String Appointmentset(Model model,Principal Principal ,@RequestParam String team, @RequestParam String promotion, @RequestParam String date,@RequestParam String note, @RequestParam String rsn) {
		// 로그인한 정보 가져오기!!
		List<EmpVO> memberlist = ppservice.memberList();
		// 작성자 정보를 넣을꺼임
		// 로그인한 정보 가져오기!!
		
		String empNo = Principal.getName();
		
		//부서정보(본부) 가져오기
		List<DeptVO> Acenterlist = ppservice.Acenter();

		//부서정보 가져오기
		model.addAttribute("empNo", empNo );
		model.addAttribute("Acenterlist", Acenterlist );
		model.addAttribute("memberList",memberlist);
		model.addAttribute("team", team);
		model.addAttribute("promotion", promotion);
		model.addAttribute("date", date);
		model.addAttribute("note", note);
		model.addAttribute("rsn", rsn);
		

		//forwarding
		return "hrm/Appointmentset";
		
	}
	
	@ResponseBody
	@GetMapping("/pDpm/{Anum}") //본부 ajax시
	public List<DeptVO> pDpm(@PathVariable String Anum) { 
		
		//부서정보(부서) 가져오기
		List<DeptVO> deptlist = ppservice.Adept(Anum);
		log.info("deptlist : " + deptlist);
		
		return deptlist;
	}
	
	@ResponseBody
	@GetMapping("/pDpm2/{Anum2}")  // 부서 ajax시
	public List<DeptVO> pDpm2(@PathVariable String Anum2) {
		
		
		
//		//부서정보(팀) 가져오기
		List<DeptVO> teamlist = ppservice.Ateam(Anum2);
		log.info("teamlist : " + teamlist);
		
		return teamlist;
	}
	
	@ResponseBody
	@PostMapping(value="Appointment", consumes = MediaType.APPLICATION_JSON_VALUE)
	public int Appointmentput(@RequestBody List<Map<String, String>> rowData, DeptVO deptVO, EmpVO empVO, AsgmtVO asgmtVO) {
		
	        int insert = ppservice.asgmtInsert(rowData, deptVO, empVO, asgmtVO);
	        
		return insert;
	}
	

	@GetMapping("/test")
	@ResponseBody
	public Map<String, String> bcTest() {
		
		List<AsgmtVO> twoList = ppservice.test("202309113");
		
		// 원하는 1줄 모습으로 변경!, 처음만 귀찮음, 또 써먹을 곳이 생김!
		Map<String, String> oneVO = new HashMap<String, String>();
		oneVO.put("preAsgmt", twoList.get(0).getAsgmtCcst());
		oneVO.put("preDtcode", twoList.get(0).getDtcode());
		oneVO.put("preGrdCode", twoList.get(0).getGrdCode());
		oneVO.put("preJcode", twoList.get(0).getJcode());
		oneVO.put("postAsgmt", twoList.get(1).getAsgmtCcst());
		oneVO.put("postDtcode", twoList.get(1).getDtcode());
		oneVO.put("postGrdCode", twoList.get(1).getGrdCode());
		oneVO.put("postJcode", twoList.get(1).getJcode());
		
		
		return oneVO;
	}
	
	
	
	@GetMapping("/asgmtDetail")
	public String asgmtUpdate(
	    @RequestParam("writer") String writer,
	    @RequestParam("fwrDate") String fwrDate,
	    @RequestParam("ccst") String ccst,
	    @RequestParam("asgmtclf") String asgmtclf,
	    @RequestParam("lwrDate") String lwrDate,
	    Model model) {
	    
		
		
	    AsgmtVO asgmtVO = new AsgmtVO();
	    asgmtVO.setWriter(writer);
	    asgmtVO.setFwrDate(fwrDate);
	    asgmtVO.setAsgmtCcst(ccst);
	    asgmtVO.setLwrDate(lwrDate);
	    asgmtVO.setAsgmtClf(asgmtclf);
	    
	    
	    log.info("VOVO" + asgmtVO);
	    
	    List<AsgmtVO> asgmtDetailList =  ppservice.asgmtDetail(asgmtVO);
	    List<AsgmtVO> asgmtDetailBefore = new ArrayList<>();
	    model.addAttribute("asgmtDetailList", asgmtDetailList);
	    log.debug("값이??"+ asgmtDetailList);
	    
	    
	    ///새로 추가
	 
	    for (AsgmtVO VO : asgmtDetailList) {
			AsgmtVO asgmtVOVO = new AsgmtVO(); 			
	    	asgmtVOVO.setAsgmtCcst("C0102");
	    	asgmtVOVO.setAsgmtPers(VO.getAsgmtPers());
	    	asgmtVOVO.setFwrDate(fwrDate);
	    	
	    	
			asgmtVOVO = ppservice.beforeDetail(asgmtVOVO);
			log.info("뭘까용???" + asgmtVOVO);
			
			
			
			asgmtDetailBefore.add(asgmtVOVO);
		}
	    log.info("비포" + asgmtDetailBefore );
	    
	    
	    Map<String, String> oneVO = new HashMap<String, String>();
	    for(int i=0; i< asgmtDetailList.size(); i++) {
	        oneVO.put("aPtnCode", asgmtDetailList.get(i).getPtnCode());
	        oneVO.put("bPtnCode", asgmtDetailBefore.get(i).getPtnCode());
	    	
	    }
	    
	    model.addAttribute("code", oneVO);
	   
	    
	    Map<String, List<AsgmtVO>> map =  new HashMap<>();
	    
	    map.put("after", asgmtDetailList);
	    map.put("before", asgmtDetailBefore);
	    
	    model.addAttribute("map" , map);
	    
	    log.info("보여줘!!" + asgmtDetailBefore);
	     
	    //새로추가 --
	    
	    
	    return "hrm/asgmtDetail";
	}
	
	@ResponseBody
	@PostMapping(value="/cancel", consumes = MediaType.APPLICATION_JSON_VALUE)
	public int cancel(@RequestBody List<Map<String, String>> empNoList) {
		
		int update = ppservice.cancelupdate(empNoList);
		
		return update;
	}
	
	@ResponseBody
	@PostMapping("/sUpdate")
	public int sUpdate(@RequestBody List<Map<String, String>> empNoList) {
		
		log.info("인사발령 업데이트 체크"+ empNoList);
		
		int update = ppservice.sUpdate(empNoList);
				
		
		
		return 2;
	}
	
	
		
	
	
	
	
	
	
}
