
const header = '${_csrf.headerName}';
const token =  '${_csrf.token}';

$(function(){
	
	//조직도 트리
	$(document).on("click","#openModal1",function(){
		//jstree결과값 받기
		$.ajax({
	        type:'get',
	        url:'/approval/organizationChart',
	        dataType:'json',
	        success: function(data) {
	        	let listOne = data.one;
	        	
	            var company = new Array();
	            
	            company.push({ id: "root", parent: "#", text: "조직도" });
	            // 데이터 받아옴
	            $.each(listOne, function(idx, item){
	            	if(item.uprDcode==0){
	            		item.uprDcode = "root";
	            	}
					company.push({id:item.dcode+"", parent:item.uprDcode+"", text:item.dnm});
	            });
	           	console.log("조직도 트리",company);
	           	
	           	var pendingChanges = [];  // 저장버튼누르기전에 변경된 사항들 저장할 배열
	           	
				// 트리 생성
	            $('#compTree').jstree({
	                core: {
	                	data: company,    //데이터 연결
	                	"check_callback": true,
	                    },
	                    types: {
	                           'default': {
	                                'icon': 'jstree-folder'
	                            }
	                           
	                    },
	                    plugins: ['wholerow', 'types','search','contextmenu'],
	                    'contextmenu' : {
	                		"items" : {
	                			"test" : { //사실상 "test"라는 이름은 변수에 가깝기 때문에 뭐든 상관없다 생각한다.
	                        		"separator_before" : false,
	                				"separator_after" : true,
	                				"label" : "추가하기",
	                				"action" : function(){
		                					var ref = $('#compTree').jstree(true),
	                						sel = ref.get_selected();
	                						    
	                					if (!sel.length) {
	                						return false;
	                					}
	                						    
	                					sel = sel[0];
	                					console.log("선택된노드:",sel);
	                						    
	                					// 선택한 노드의 id 값을 가져옴
	                			        var selectedNodeId = sel;
	                					var children = ref.get_node(sel).children;
	                					var lastChild = children[children.length - 1];
	                					var nextId = parseInt(lastChild) + 1;
	                					
	                			        console.log("추가된id::",nextId);
	                			        
	                			        if(isNaN(nextId) || nextId == "") {
	                			        	nextId = selectedNodeId + 1;
	                			        }
	                			        
	                			        // 새로운 폴더 노드를 생성하고 선택한 노드의 하위로 추가
	                			        var newNode = {
	                			        	"id": nextId,
	                			            "text": "새 조직", // 원하는 폴더 이름으로 수정
	                			            "parent": selectedNodeId,
	                			            "type": "add" // 적절한 유형으로 수정
	                			        };
	                			        
	                			        console.log(newNode);
	                			        
	                			        // 새로운 노드를 생성
	                			        var newFolderNode = ref.create_node(sel, newNode);
										
	                			        console.log("newFolderNode:::",newFolderNode);
	                			        
	                			        // 편집 모드 시작
		                		        ref.edit(newFolderNode, null, function (node, status, canceled) {
		                		            if (status) {
		                		                // 노드 텍스트가 업데이트된 경우
		                		                var updatedNode = ref.get_node(node);
		                		                console.log("노드 텍스트가 업데이트됨:", updatedNode.text);

		                		                // 업데이트된 노드 정보를 처리
		                		                newNode.text = updatedNode.text
		                		                pendingChanges.push(newNode);

		                		            }
		                		        });
	                				}
	                			},
	                			"test1" : {
	                				"separator_before" : false,
	                				"separator_after" : true,
	                				"label" : "이름 변경",
	                				"action" : function(){
	                					var ref = $('#compTree').jstree(true),
	                		            sel = ref.get_selected();

		                		        if (!sel.length) {
		                		            return false;
		                		        }
	
		                		        sel = sel[0];
		                		        console.log("선택된 노드:", sel);
	
		                		        // 선택한 노드의 id 값을 가져옴
		                		        var selectedNodeId = sel;
		                		        
		                		     	// 편집 모드 시작
		                		        ref.edit(sel, null, function (node, status, canceled) {
		                		            if (status) {
		                		                // 노드 텍스트가 업데이트된 경우
		                		                var updatedNode = ref.get_node(node);
		                		                updatedNode.type = "update";
		                		                console.log("노드 텍스트가 업데이트됨:", updatedNode);

		                		                // 업데이트된 노드 정보를 처리
		                		                pendingChanges.push(updatedNode);
		                		            }
		                		        });
	                				}
	                			},
	                			"test2" : {
	                				"separator_before" : false,
	                				"separator_after" : true,
	                				"label" : "삭제하기",
	                				"action" : function(){
	                					var ref = $('#compTree').jstree(true),
	                		            sel = ref.get_selected();

		                		        if (!sel.length) {
		                		            return false;
		                		        }
	
		                		        sel = sel[0];
		                		        console.log("선택된 노드:", sel);
		                		        
		                		        var children = ref.get_node(sel).children;
		                		        
		                		        console.log("하위조직여부::", children);
		                		        console.log("하위조직length여부::", children.length);
	                		            
		                		        if (children && children.length > 0) {
		                		            alert("하위 조직이 있는 경우 삭제할 수 없습니다. 하위 조직을 먼저 삭제해주세요.");
		                		            return false;
		                		        }
		                		        
		                		        $.ajax({
			       	                		 type : "post",
			       	                	   	 url : "/setting/checkEmp",
			       	                		 data : sel,
			       	                		 contentType: "application/json",
			       	                		 dataType : "json",
			       	                		 beforeSend:function(xhr){
			                       		         xhr.setRequestHeader(header, token);
			                       		     },
			       	                		 success : function(result){
			       	                			 result = parseInt(result);
			       	                			 console.log("result : " + result);
			       	                			 if(result > 0){
			       	                				alert("사원이 존재하는 조직은 삭제할 수 없습니다. 사원을 먼저 인사발령 해 주세요.")
			       	                				return false;
			       	                			 }
			       	                			 else{
			       	                				 // 삭제를 확인하기 위한 확인 대화 상자를 표시합니다.
			 		                		         if (confirm("정말로 이 항목을 삭제하시겠습니까?")) {
			 		                		        	 // 삭제할 노드 정보를 가져옵니다.
			 		                		             var deletedNode = ref.get_node(sel);

			 		                		             // 선택한 노드를 삭제합니다.
			 		                		             ref.delete_node(sel);


			 		                		             // 삭제한 노드의 id와 type를 pendingChanges 배열에 추가
			 		                		             var deletedNodeInfo = {
			 		                		                 id: deletedNode.id,
			 		                		                 type: "delete"
			 		                		             };
		 		                		             pendingChanges.push(deletedNodeInfo);

		 		                		             console.log("노드 삭제됨:", deletedNodeInfo);
			 		                		         }
			       	                			 }
			       	                			 
			       	                		 },
			       	                		 error: function (xhr, status, error) {
			       	                			 console.log("code: " + xhr.status);
			       	                			 console.log("message: " + xhr.responseText);
			       	                			 console.log("error: " + error);
			       	                		 },
		       	                	    	
		       	                	 	});
	
		                		        
	                				}
	                			}
	                		}
	                	}  
	             })
	             //트리 로딩 완료 이벤트
	             .on('loaded.jstree', function(event, data){
	                 
	                 $("#save").on("click",function() {
	                	 console.log("pendingChanges:::",pendingChanges);
	                	 $.ajax({
	                		 type : "post",
	                	   	 url : "/setting/compTreeUp",
	                		 data : JSON.stringify(pendingChanges),
	                		 contentType: "application/json",
	                		 dataType : "json",
	                		 beforeSend:function(xhr){
                		         xhr.setRequestHeader(header, token);
                		     },
	                		 success : function(result){
	                			 console.log("result : " + result);
	                			 alert("저장 완료")
	                		 },
	                		 error: function (xhr, status, error) {
	                			 console.log("code: " + xhr.status);
	                			 console.log("message: " + xhr.responseText);
	                			 console.log("error: " + error);
	                		 },
	                	    	
	                	 });
	                	 
	                 });
	                    
	             })
// 	             .on('select_node.jstree', function(event, data){
// 	            	 console.log("선택한노드:", data.node);
// 	            	 if(data.node.original.id != null){
	            		 
// 						 $.ajax({
// 							 url : "/approval/selectEmp?keyword=" + data.node.original.id,
// 							 dataType : "json",
// 							 type : "get",
// 							 success : function(result){
// 							 }
// 	            		 });

// 	            	 };
// 	             });
	        },
	        error: function (xhr, status, error) {
				console.log("code: " + xhr.status);
				console.log("message: " + xhr.responseText);
				console.log("error: " + error);
			},
	   });
		
	});
	
	$("#close").on("click",function() {
		$('#compTree').jstree("destroy");  //트리 초기화
	});
	
	//직위 트리
	$("#openModal2").on("click",function() {
		//jstree결과값 받기
		$.ajax({
	        type:'get',
	        url:'/setting/selectPtn',
	        dataType:'json',
	        success: function(data) {
	        	
	            var ptn = new Array();
	            
	            ptn.push({ id: "A01", parent: "#", text: "직위" });
	            // 데이터 받아옴
	            $.each(data, function(idx, item){
	            	
					ptn.push({id:item.cmCode+"", parent:item.parentCd+"", text:item.cmNm});
	            });
	           	console.log("직위 트리",ptn);
	           	
				// 트리 생성
	            $('#compPtnTree').jstree({
	                core: {
	                	data: ptn,    //데이터 연결
	                	"check_callback": true,
	                    },
	                    types: {
	                           'default': {
	                                'icon': 'jstree-folder'
	                            }
	                           
	                    },
	                    plugins: ['wholerow', 'types','search','contextmenu'],
	                    'contextmenu' : {
	                		"items" : {
	                			"test1" : {
	                				"separator_before" : false,
	                				"separator_after" : true,
	                				"label" : "이름 변경",
	                				"action" : function(){
	                					var ref = $('#compPtnTree').jstree(true),
	                		            sel = ref.get_selected();

		                		        if (!sel.length) {
		                		            return false;
		                		        }
	
		                		        sel = sel[0];
		                		        console.log("선택된 노드:", sel);
	
		                		        // 선택한 노드의 id 값을 가져옴
		                		        var selectedNodeId = sel;
		                		        
		                		     	// 편집 모드 시작
		                		        ref.edit(sel, null, function (node, status, canceled) {
		                		            if (status) {
		                		                // 노드 텍스트가 업데이트된 경우
		                		                var updatedNode = ref.get_node(node);
		                		                updatedNode.type = "update";
		                		                console.log("노드 텍스트가 업데이트됨:", updatedNode);

		                		                // 업데이트된 노드 정보를 처리
		                		                ptnPending.push(updatedNode);
		                		            }
		                		        });
	                				}
	                			},
	                			"test2" : {
	                				"separator_before" : false,
	                				"separator_after" : true,
	                				"label" : "삭제하기",
	                				"action" : function(){
	                					var ref = $('#compPtnTree').jstree(true),
	                		            sel = ref.get_selected();

		                		        if (!sel.length) {
		                		            return false;
		                		        }
	
		                		        sel = sel[0];
		                		        console.log("선택된 노드:", sel);
		                		        
		                		        $.ajax({
			       	                		 type : "post",
			       	                	   	 url : "/setting/checkPtnEmp",
			       	                		 data : sel,
			       	                		 contentType: "application/json",
			       	                		 dataType : "json",
			       	                		 beforeSend:function(xhr){
			                       		         xhr.setRequestHeader(header, token);
			                       		     },
			       	                		 success : function(result){
			       	                			 result = parseInt(result);
			       	                			 console.log("result : " + result);
			       	                			 if(result > 0){
			       	                				alert("현재 사용중인 직위는 삭제할 수 없습니다.")
			       	                				return false;
			       	                			 }
			       	                			 else{
			       	                				 // 삭제를 확인하기 위한 확인 대화 상자를 표시합니다.
			 		                		         if (confirm("정말로 이 항목을 삭제하시겠습니까?")) {
			 		                		        	 // 삭제할 노드 정보를 가져옵니다.
			 		                		             var deletedNode = ref.get_node(sel);

			 		                		             // 선택한 노드를 삭제합니다.
			 		                		             ref.delete_node(sel);


			 		                		             // 삭제한 노드의 id와 type를 pendingChanges 배열에 추가
			 		                		             var deletedNodeInfo = {
			 		                		                 id: deletedNode.id,
			 		                		                 type: "delete"
			 		                		             };
		 		                		             ptnPending.push(deletedNodeInfo);

		 		                		             console.log("노드 삭제됨:", deletedNodeInfo);
			 		                		         }
			       	                			 }
			       	                			 
			       	                		 },
			       	                		 error: function (xhr, status, error) {
			       	                			 console.log("code: " + xhr.status);
			       	                			 console.log("message: " + xhr.responseText);
			       	                			 console.log("error: " + error);
			       	                		 },
		       	                	    	
		       	                	 	});
	                				}
	                			}
	                		}
	                	}  
	             })
	             //트리 로딩 완료 이벤트
	             .on('loaded.jstree', function(event, data){
	            	 
	            	 $("#compPtnTree").jstree("open_all");  //트리 펼치기
	            	 
	                 $("#savePtn").on("click",function() {
	                	 console.log("ptnPending:::",ptnPending);
	                	 
	                	 const ptnList = new Array();
	                	 
	                	 $.each(ptnPending, function(idx, item){
	     	            	
	                		 ptnList.push({cmCode:item.id+"", parentCd:item.parent+"", 
	                			 cmNm:item.text+"", cmGroup:item.group+"", type:item.type+""});
	     	             });

	                	 console.log("ptnList:::", ptnList);
	                	 
	                	 $.ajax({
	                		 type : "post",
	                	   	 url : "/setting/ptnUp",
	                		 data : JSON.stringify(ptnList),
	                		 contentType: "application/json",
	                		 dataType : "json",
	                		 beforeSend:function(xhr){
                		         xhr.setRequestHeader(header, token);
                		     },
	                		 success : function(result){
	                			 console.log("result : " + result);
	                			 alert("저장 완료")
	                		 },
	                		 error: function (xhr, status, error) {
	                			 console.log("code: " + xhr.status);
	                			 console.log("message: " + xhr.responseText);
	                			 console.log("error: " + error);
	                		 },
	                	    	
	                	 });
	                	 
	                 });
	                    
	             })
	        },
	        error: function (xhr, status, error) {
				console.log("code: " + xhr.status);
				console.log("message: " + xhr.responseText);
				console.log("error: " + error);
		   	},
	    });
	});
	
	$("#closePtn").on("click",function() {
		$('#compPtnTree').jstree("destroy");  //트리 초기화
	});
	
	//직책 트리
	$("#openModal3").on("click",function() {
		//jstree결과값 받기
		$.ajax({
	        type:'get',
	        url:'/setting/selectPtn',
	        dataType:'json',
	        success: function(data) {
	        	
	            var ptn = new Array();
	            
	            ptn.push({ id: "A01", parent: "#", text: "직위" });
	            // 데이터 받아옴
	            $.each(data, function(idx, item){
	            	
					ptn.push({id:item.cmCode+"", parent:item.parentCd+"", text:item.cmNm});
	            });
	           	console.log("직위 트리",ptn);
	           	
				// 트리 생성
	            $('#compPtnTree').jstree({
	                core: {
	                	data: ptn,    //데이터 연결
	                	"check_callback": true,
	                    },
	                    types: {
	                           'default': {
	                                'icon': 'jstree-folder'
	                            }
	                           
	                    },
	                    plugins: ['wholerow', 'types','search','contextmenu'],
	                    'contextmenu' : {
	                		"items" : {
	                			"test1" : {
	                				"separator_before" : false,
	                				"separator_after" : true,
	                				"label" : "이름 변경",
	                				"action" : function(){
	                					var ref = $('#compPtnTree').jstree(true),
	                		            sel = ref.get_selected();

		                		        if (!sel.length) {
		                		            return false;
		                		        }

		                		        sel = sel[0];
		                		        console.log("선택된 노드:", sel);

		                		        // 선택한 노드의 id 값을 가져옴
		                		        var selectedNodeId = sel;
		                		        
		                		     	// 편집 모드 시작
		                		        ref.edit(sel, null, function (node, status, canceled) {
		                		            if (status) {
		                		                // 노드 텍스트가 업데이트된 경우
		                		                var updatedNode = ref.get_node(node);
		                		                updatedNode.type = "update";
		                		                console.log("노드 텍스트가 업데이트됨:", updatedNode);

		                		                // 업데이트된 노드 정보를 처리
		                		                ptnPending.push(updatedNode);
		                		            }
		                		        });
	                				}
	                			},
	                			"test2" : {
	                				"separator_before" : false,
	                				"separator_after" : true,
	                				"label" : "삭제하기",
	                				"action" : function(){
	                					var ref = $('#compPtnTree').jstree(true),
	                		            sel = ref.get_selected();

		                		        if (!sel.length) {
		                		            return false;
		                		        }

		                		        sel = sel[0];
		                		        console.log("선택된 노드:", sel);
		                		        
		                		        $.ajax({
			       	                		 type : "post",
			       	                	   	 url : "/setting/checkPtnEmp",
			       	                		 data : sel,
			       	                		 contentType: "application/json",
			       	                		 dataType : "json",
			       	                		 beforeSend:function(xhr){
			                       		         xhr.setRequestHeader(header, token);
			                       		     },
			       	                		 success : function(result){
			       	                			 result = parseInt(result);
			       	                			 console.log("result : " + result);
			       	                			 if(result > 0){
			       	                				alert("현재 사용중인 직위는 삭제할 수 없습니다.")
			       	                				return false;
			       	                			 }
			       	                			 else{
			       	                				 // 삭제를 확인하기 위한 확인 대화 상자를 표시합니다.
			 		                		         if (confirm("정말로 이 항목을 삭제하시겠습니까?")) {
			 		                		        	 // 삭제할 노드 정보를 가져옵니다.
			 		                		             var deletedNode = ref.get_node(sel);

			 		                		             // 선택한 노드를 삭제합니다.
			 		                		             ref.delete_node(sel);


			 		                		             // 삭제한 노드의 id와 type를 pendingChanges 배열에 추가
			 		                		             var deletedNodeInfo = {
			 		                		                 id: deletedNode.id,
			 		                		                 type: "delete"
			 		                		             };
		 		                		             ptnPending.push(deletedNodeInfo);

		 		                		             console.log("노드 삭제됨:", deletedNodeInfo);
			 		                		         }
			       	                			 }
			       	                			 
			       	                		 },
			       	                		 error: function (xhr, status, error) {
			       	                			 console.log("code: " + xhr.status);
			       	                			 console.log("message: " + xhr.responseText);
			       	                			 console.log("error: " + error);
			       	                		 },
		       	                	    	
		       	                	 	});
	                				}
	                			}
	                		}
	                	}  
	             })
	             //트리 로딩 완료 이벤트
	             .on('loaded.jstree', function(event, data){
	            	 
	            	 $("#compPtnTree").jstree("open_all");  //트리 펼치기
	            	 
	                 $("#savePtn").on("click",function() {
	                	 console.log("ptnPending:::",ptnPending);
	                	 
	                	 const ptnList = new Array();
	                	 
	                	 $.each(ptnPending, function(idx, item){
	     	            	
	                		 ptnList.push({cmCode:item.id+"", parentCd:item.parent+"", 
	                			 cmNm:item.text+"", cmGroup:item.group+"", type:item.type+""});
	     	             });

	                	 console.log("ptnList:::", ptnList);
	                	 
	                	 $.ajax({
	                		 type : "post",
	                	   	 url : "/setting/ptnUp",
	                		 data : JSON.stringify(ptnList),
	                		 contentType: "application/json",
	                		 dataType : "json",
	                		 beforeSend:function(xhr){
	            		         xhr.setRequestHeader(header, token);
	            		     },
	                		 success : function(result){
	                			 console.log("result : " + result);
	                			 alert("저장 완료")
	                		 },
	                		 error: function (xhr, status, error) {
	                			 console.log("code: " + xhr.status);
	                			 console.log("message: " + xhr.responseText);
	                			 console.log("error: " + error);
	                		 },
	                	    	
	                	 });
	                	 
	                 });
	                    
	             })
	        },
	        error: function (xhr, status, error) {
				console.log("code: " + xhr.status);
				console.log("message: " + xhr.responseText);
				console.log("error: " + error);
		   	},
	    });
	});

	$("#closePtn").on("click",function() {
		$('#compPtnTree').jstree("destroy");  //트리 초기화
	});
	
	
	//jsTree 열고/닫기
	let openTreeTemp = false;
	
    $("#openTree").on("click", function () {
    	if(openTreeTemp == false){
   		 	$("#compTree").jstree("open_all");
	   	}else{
	   	 	$("#compTree").jstree("close_all");
	   	}
	   	openTreeTemp = !openTreeTemp;
    });
    
    var ptnPending = [];  // 저장버튼누르기전에 변경된 사항들 저장할 배열
    
    //직위 추가
    $("#ptnPlus").on("click", function() {
    	var ptnRef = $('#compPtnTree').jstree(true),
    	ptnSel = ptnRef.get_node('A01')
    		    
    	console.log("선택된노드:",ptnSel);
    		    
    	// 선택한 노드의 id 값을 가져옴
    	var children = ptnRef.get_node(ptnSel).children;
    	var lastChild = children[children.length - 1];
    	var nextId = parseInt(lastChild.substring(2)) + 1;
    	nextId = "A0"+nextId;
    	
        console.log("추가된id::",nextId);
        
        // 새로운 폴더 노드를 생성하고 선택한 노드의 하위로 추가
        var newNode = {
        	"id": nextId,
            "text": "새 직위", // 원하는 폴더 이름으로 수정
            "parent": ptnSel.id,
            "type": "add", // 적절한 유형으로 수정
            "group": "spot"
        };
        
        console.log(newNode);
        
        // 새로운 노드를 생성
        var newFolderNode = ptnRef.create_node(ptnSel, newNode);
    	
        console.log("newFolderNode:::",newFolderNode);
        
        // 편집 모드 시작
        ptnRef.edit(newFolderNode, null, function (node, status, canceled) {
            if (status) {
                // 노드 텍스트가 업데이트된 경우
                var updatedNode = ptnRef.get_node(node);
                console.log("노드 텍스트가 업데이트됨:", updatedNode.text);

                // 업데이트된 노드 정보를 처리
                newNode.text = updatedNode.text
                ptnPending.push(newNode);

            }
        });
    });
    
	
}); //$function 끝

//찾기!
function fSch() { 
    $('#compTree').jstree(true).search($("#schTreeText").val());
}

function fPtnSch() { 
    $('#compPtnTree').jstree(true).search($("#schPtnText").val());
}
