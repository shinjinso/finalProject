package kr.or.ddit.personnel.controller;


import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.security.Principal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import kr.or.ddit.common.vo.DeptVO;
import kr.or.ddit.common.vo.EmpVO;
import kr.or.ddit.excelupload.ExcelRead;
import kr.or.ddit.excelupload.ExcelReadOption;
import kr.or.ddit.personnel.service.MemberService;
import kr.or.ddit.sms.service.CoolSmsService;
import kr.or.ddit.vo.AsgmtVO;
import kr.or.ddit.vo.AuthorAlwncVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/ex")
public class exController {
	@Autowired
	MemberService ppservice;
	
	@Autowired
	CoolSmsService coolSmsService;
	
	//암호화
	@Autowired
	BCryptPasswordEncoder passwordEncoder;
	
	@GetMapping("/ph")
	public String phCtr(HttpServletRequest request, Model model) {
		String name = request.getParameter("name");
		String id = request.getParameter("id");
		String pw = request.getParameter("pw");
		String email = request.getParameter("email");

		model.addAttribute("id",id);
		model.addAttribute("name",name);
		model.addAttribute("pw",pw);
		model.addAttribute("email",email);
		
		log.info("받은 데이터 :",model);
		
		return "hrm/personnelHome";
	}
	@GetMapping("/excel")
	public String excelUpload() {
		
		return("hrm/excelUpload");
	}
	
	
	//사원 여러명 추가하기
	@ResponseBody
	@PostMapping("/excelUploadAjax")
    public ModelAndView excelUploadAjax(MultipartHttpServletRequest request,Principal principal)  throws Exception{
        MultipartFile excelFile =request.getFile("excelFile");
        System.out.println("엑셀 파일 업로드 컨트롤러");
        if(excelFile==null || excelFile.isEmpty()){
            throw new RuntimeException("엑셀파일을 선택 해 주세요.");
        }
        
        File destFile = new File("D:\\insightFile"+excelFile.getOriginalFilename());
        log.info("트랜스하기전 파일"+destFile);
        try{
            excelFile.transferTo(destFile);
        }catch(IllegalStateException | IOException e){
            throw new RuntimeException(e.getMessage(),e);
        }
        log.info("트랜스후 파일"+excelFile);
        
        //Service 단에서 가져온 코드 
        ExcelReadOption excelReadOption = new ExcelReadOption();
        excelReadOption.setFilePath(destFile.getAbsolutePath());
        excelReadOption.setOutputColumns("A","B","C","D","E","F","G","H","I");
        excelReadOption.setStartRow(2);
        
        log.info("엑셀리드옵션 세팅 후"+excelReadOption);
        
        List<Map<String, String>>excelContent =ExcelRead.read(excelReadOption);
        log.info("엑셀콘텐트"+excelContent);
        log.info("엑셀콘텐트첫번째는?"+excelContent.get(1));
        log.info("엑셀콘텐트두번째는?"+excelContent.get(2));
        
        
        //List 객체들 만들기
        List<EmpVO> empVOList = new ArrayList<EmpVO>();
        log.info("비어있니?empVOList"+empVOList);
        
        List<AuthorAlwncVO> authorAlwncVOlist = new ArrayList<AuthorAlwncVO>();
        
        List<AsgmtVO> asgmtVOlist = new ArrayList<AsgmtVO>();//병철이 인사발령 엔티티 VO리스트
        
        
        // 엑셀 첫 번째 행에서 열의 이름을 가져옵니다.
        Map<String, String> firstRow = excelContent.get(0);
        log.info("과연 첫번째열은?firstRow"+firstRow);

        for (Map<String, String> excelRow : excelContent.subList(1, excelContent.size())) {
            EmpVO empVO = new EmpVO();
           

            // 열의 이름을 반복하면서 열의 이름을 EmpVO 필드 이름에 맞춰서 변경
            for (String columnName : excelRow.keySet()) {
                // 열의 이름을 가져오고, 필드 이름에 맞게 변경합니다.
                String fieldName = mapColumnNameToFieldName(columnName);

                try {
                    // EmpVO 클래스에서 필드 이름과 일치하는 필드 찾기
                    Field field = EmpVO.class.getDeclaredField(fieldName);
                    field.setAccessible(true);

                    // 해당 필드에 값을 설정
                    field.set(empVO, excelRow.get(columnName));
                } catch (NoSuchFieldException | IllegalAccessException e) {
                    // 필드를 찾을 수 없거나 접근할 수 없는 경우 예외 처리
                    e.printStackTrace();
                }
            }

            // empVO 객체를 리스트에 추가
            empVOList.add(empVO);
           
        }
        
       

        
        //벨류값 변환 세팅하기
        for (EmpVO empVO : empVOList) {
        	AuthorAlwncVO authorAlwncVO = new AuthorAlwncVO();
        	AsgmtVO asgmtVO = new AsgmtVO();
        	
            String entCaseNm = empVO.getEntCaseNm();
            String entCaseCode = ""; // 초기값 설정
            String stClfCdNm = empVO.getStClfCdNm();
            String stClfCd = ""; // 초기값 설정
            String ptnCodeNm = empVO.getPtnCodeNm();
            String ptnCode = ""; // 초기값 설정
            String genCodeNm = empVO.getGenCodeNm();
            String genCode = ""; // 초기값 설정
            String cpNum = "0"+empVO.getCpNo();
            empVO.setCpNo(cpNum);
            
            
            // 로그인맴버권한 저장 세팅
    		String authrtId = "ROLE_MEMBER";
    		String auempNo = empVO.getEmpNo();
    		authorAlwncVO.setAuthrtId(authrtId);
    		authorAlwncVO.setEmpNo(auempNo);
    		
    		// 병철이 인사발령 엔티티에 필요한 데이터 세팅
    		asgmtVO.setAsgmtPers(empVO.getEmpNo());
    		asgmtVO.setWriter(principal.getName());
    		asgmtVO.setAsgmtClf("신규 직원 추가");
    		asgmtVO.setAsgmtRsn("신규 직원 추가");
    		asgmtVO.setAsgmtMm("신규 직원 추가");
    		asgmtVO.setAsgmtCcst("C0102");
    		log.info("asgmtVO 잘 들어 갔냐? : " + asgmtVO);
    		
    		// 사원 추가 비밀번호 암호화 및 사원번호 부서VO에 세팅
    		String password = passwordEncoder.encode(empVO.getEmpPass());
    		empVO.setEmpPass(password);
    		log.info("암호화 되었느냐?!!! : " + password);
            

            // stClfCdNm 값에 따라 stClfCd 값을 설정합니다.
            if ("재직중".equals(stClfCdNm)) {
            	stClfCd = "A0801";
            } else if ("휴직중".equals(stClfCdNm)) {
            	stClfCd = "A0802";
            }
            // empVO 객체에 stClfCd 값을 설정합니다.
            empVO.setStClfCd(stClfCd);
            
            // entCaseNm 값에 따라 entCaseCode 값을 설정합니다.
            if ("신입".equals(entCaseNm)) {
            	entCaseCode = "A0701";
            } else if ("경력".equals(entCaseNm)) {
            	entCaseCode = "A0702";
            }
            // empVO 객체에 entCaseCode 값을 설정합니다.
            empVO.setEntCaseCode(entCaseCode);
            
        
            // ptnCodeNm 값에 따라 ptnCode 값을 설정합니다.
            if ("사원".equals(ptnCodeNm)) {
            	ptnCode = "A0101";
            } else if ("주임".equals(ptnCodeNm)) {
            	ptnCode = "A0102";
            } else if ("대리".equals(ptnCodeNm)) {
            	ptnCode = "A0103";
            } else if ("과장".equals(ptnCodeNm)) {
            	ptnCode = "A0104";
            } else if ("차장".equals(ptnCodeNm)) {
            	ptnCode = "A0105";
            } else if ("부장".equals(ptnCodeNm)) {
            	ptnCode = "A0106";
            } else if ("이사".equals(ptnCodeNm)) {
            	ptnCode = "A0107";
            } else if ("상무".equals(ptnCodeNm)) {
            	ptnCode = "A0108";
            } else if ("전무".equals(ptnCodeNm)) {
            	ptnCode = "A0109";
            } else if ("부사장".equals(ptnCodeNm)) {
            	ptnCode = "A0110";
            } else if ("사장".equals(ptnCodeNm)) {
            	ptnCode = "A0111";
            } else if ("부회장".equals(ptnCodeNm)) {
            	ptnCode = "A0112";
            } else if ("회장".equals(ptnCodeNm)) {
            	ptnCode = "A0113";
            }
            // empVO 객체에 ptnCode 값을 설정합니다.
            empVO.setPtnCode(ptnCode);
            
            // genCodeNm 값에 따라 genCode 값을 설정합니다.
            if ("남성".equals(genCodeNm)) {
            	genCode = "B0201";
            } else if ("여성".equals(genCodeNm)) {
            	genCode = "B0202";
            }
            // empVO 객체에 genCode 값을 설정합니다.
            empVO.setGenCode(genCode);
            // 로그인 정보 authorAlwncVOlist에 값 넣기
            authorAlwncVOlist.add(authorAlwncVO);
            // 인사발령 정보 asgmtVOlist에 세팅
            asgmtVOlist.add(asgmtVO);
            log.info("asgmtVOlist 하나하나 잘 들어 갔냐? : " + asgmtVOlist);
            
        }
        
        log.info("empVOListㅈㅂㄷㅂㅈㄷ"+empVOList);
        int result = 0;
        result += ppservice.insertEmpList(empVOList);
        log.info("empVOList에 잘 들어갔냐? 제발!!!!!"+empVOList);
        log.info("empVOList의 result값"+result);
        if(result > 0) {
        	for (EmpVO vo : empVOList) {
        		coolSmsService.sendSMS(vo);
			}
        }
        
        result += ppservice.insertAuthorAlwncVOList(authorAlwncVOlist);
        log.info("authorAlwncVOlist에 잘 들어갔냐?!"+authorAlwncVOlist);
        log.info("authorAlwncVOlist의 result값"+result);
        
        result += ppservice.insertAsgmtVOList(asgmtVOlist);
        log.info("asgmtVOlist 모두 들어 갔냐? : " + asgmtVOlist);
        log.info("asgmtVOlist의 result값"+result);
	       
        
//        for(Map<String, String> article: excelContent){
//            System.out.println(article.get("A"));
//            System.out.println(article.get("B"));
//            System.out.println(article.get("C"));
//            System.out.println(article.get("D"));
//            System.out.println(article.get("E"));
//            System.out.println(article.get("F"));
//            System.out.println(article.get("G"));
//            System.out.println(article.get("H"));
//        }
        
        //userService.excelUpload(destFile); //서비스 부분을 삭제한다.
        
        //FileUtils.forceDelete(destFile.getAbsolutePath());
        
        ModelAndView view = new ModelAndView();
        view.setViewName("hrm/personnelHome");
        return view;
    }
	
	
	private String mapColumnNameToFieldName(String columnName) {
	    // 열 이름을 매핑하기 위한 로직을 추가합니다.
	    if ("A".equals(columnName)) {
	        return "empNm"; 
	    } else if ("B".equals(columnName)) {
	        return "stClfCdNm"; 
	    } else if ("C".equals(columnName)) {
	        return "empNo"; 
		} else if ("D".equals(columnName)) {
			return "empPass"; 
		} else if ("E".equals(columnName)) {
			return "entCaseNm"; 
		} else if ("F".equals(columnName)) {
			return "ptnCodeNm"; 
		} else if ("G".equals(columnName)) {
			return "empMail"; 
		} else if ("H".equals(columnName)) {
			return "genCodeNm"; 
		} else if ("I".equals(columnName)) {
			return "cpNo"; 
		}
	    // 그 외의 열 이름은 필드 이름과 직접 일치하도록 설정
	    return columnName;
	}
	


}
