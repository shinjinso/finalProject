<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.salary.mapper.SalaryMapper">


	<!-- 사원테이블 -->
	<resultMap type="empVO" id="empMap">
		<result property="empNo" column="EMP_NO"/>
		<result property="empNm" column="EMP_NM"/>
		<result property="empPass" column="EMP_PASS"/>
		<result property="genCode" column="GEN_CODE"/>
		<result property="empMail" column="EMP_MAIL"/>
		<result property="empAddr1" column="EMP_ADDR1"/>
		<result property="empAddr2" column="EMP_ADDR2"/>
		<result property="empAddr3" column="EMP_ADDR3"/>
		<result property="empBrdt" column="EMP_BRDT"/>
		<result property="regn" column="REGN"/>
		<result property="cpNo" column="CP_NO"/>
		<result property="ofcNo" column="OFC_NO"/>
		<result property="empImg" column="EMP_IMG"/>
		<result property="bankCode" column="BANK_CODE"/>
		<result property="acctNo" column="ACCT_NO"/>
		<result property="owner" column="OWNER"/>
		<result property="entDate" column="ENT_DATE"/>
		<result property="outDate" column="OUT_DATE"/>
		<result property="empMm" column="EMP_MM"/>
		<result property="ctrtCaseCode" column="CTRT_CASE_CODE"/>
		<result property="entCaseCode" column="ENT_CASE_CODE"/>
		<result property="bsWktime" column="BS_WKTIME"/>
		<result property="dtcode" column="DTCODE"/>
		<result property="ptnCode" column="PTN_CODE"/>
		<result property="jcode" column="JCODE"/>
		<result property="grdCode" column="GRD_CODE"/>
		<result property="enabled" column="ENABLED"/>
		<result property="stClfCd" column="ST_CLF_CD"/>
		<result property="empSalary" column="EMP_SALARY"/>
		<result property="profileFileNo" column="PROFILE_FILE_NO"/>
		<result property="signFileNo" column="SIGN_FILE_NO"/>
		<result property="workMethodCode" column="WORK_METHOD_CODE"/>
		<result property="dcode" column="DCODE"/>
		<result property="acenter" column="ACENTER"/>
		<result property="team" column="TEAM"/>
		
		<result property="rnum" column="RNUM"/>
		
		<!--  코드네임 -->
		<result property="genCodeNm" column="GEN_CODE_NM"/>
		<result property="bankCodeNm" column="BANK_CODE_NM"/>
		<result property="ctrtCaseNm" column="CTRT_CASE_NM"/>
		<result property="entCaseNm" column="ENT_CASE_NM"/>
		<result property="dtCodeNm" column="DTCODE_NM"/>
		<result property="ptnCodeNm" column="PTN_CODE_NM"/>
		<result property="jcodeNm" column="JCODE_NM"/>
		<result property="grdCodeNm" column="GRD_CODE_NM"/>
		<result property="stClfCdNm" column="ST_CLF_CD_NM"/>
		<result property="workMethodCodeNm" column="WORK_METHOD_CODE_NM"/>
		
		<!-- 부서 테이블 -->	
		<collection property="deptVOList" resultMap="deptMap" />
		
	</resultMap>
	
	<!-- 부서 테이블 -->
	<resultMap type="deptVO" id="deptMap">
		<result property="dcode" column="DCODE"/>
		<result property="uprDcode" column="UPR_DCODE"/>
		<result property="dnm" column="DNM"/>
		<result property="empNo" column="EMP_NO"/>
		<result property="dabst" column="DABST"/>
		<result property="delynCd" column="DELYN_CD"/>
	</resultMap>



<!-- BookInfoDao->map : {size=10, currentPage=1, keyword=1457} -->
	<sql id="where">
		<!-- 전체검색 -->
		<choose>
			<when test="condition!=null and condition!=''">
				<if test="condition=='empNo'">
					AND (
						A.EMP_NO			LIKE '%' || #{keyword} || '%'
					)
				</if>
				<if test="condition=='empNm'">
					AND (
						A.EMP_NM			LIKE '%' || #{keyword} || '%'
					)
				</if>
				<if test="condition=='dnm'">
					AND (
						B.DNM			LIKE '%' || #{keyword} || '%'
					)
				</if>
				<if test="condition=='ptnCodeNm'">
					AND (
						(SELECT CM_NM FROM CMCODE WHERE CM_GROUP = 'spot' AND CM_CODE = PTN_CODE) LIKE '%' || #{keyword} || '%'
					)
				</if>
			</when>
			<otherwise>
				<if test="keyword!=null and keyword!=''">  <!-- 키워드가 없을 때 (사실 키워드 없어도 %% 처리 되기 때문에 에러는 안나지만, 아예 안쓰면 괜히 and절 실행 안해도 되서, 시간 단축 가능 (if문 쓰는 이유) -->
				  AND (
					A.EMP_NO			LIKE '%' || #{keyword} || '%' OR
					A.EMP_NM			LIKE '%' || #{keyword} || '%' OR 
				    A.EMP_BRDT			LIKE '%' || #{keyword} || '%' OR 
				    A.REGN				LIKE '%' || #{keyword} || '%' OR
				    A.CP_NO				LIKE '%' || #{keyword} || '%' OR
				    A.OFC_NO 			LIKE '%' || #{keyword} || '%' OR
				    A.EMP_IMG 			LIKE '%' || #{keyword} || '%' OR
				    A.BANK_CODE 		LIKE '%' || #{keyword} || '%' OR
				    A.ACCT_NO			LIKE '%' || #{keyword} || '%' OR
				    A.OWNER				LIKE '%' || #{keyword} || '%' OR
				    A.ENT_DATE			LIKE '%' || #{keyword} || '%' OR 
				    A.OUT_DATE			LIKE '%' || #{keyword} || '%' OR 
				    A.EMP_MM			LIKE '%' || #{keyword} || '%' OR 
				    (SELECT CM_NM FROM CMCODE WHERE CM_GROUP = 'contract' AND CM_CODE = CTRT_CASE_CODE) AS CTRT_CASE_NM LIKE '%' || #{keyword} || '%' OR 
				    A.ACENTER 			LIKE '%' || #{keyword} || '%' OR
				    A.DCODE				LIKE '%' || #{keyword} || '%' OR
				    (SELECT CM_NM FROM CMCODE WHERE CM_GROUP = 'join' AND CM_CODE = ENT_CASE_CODE) AS ENT_CASE_NM
				    A.BS_WKTIME			LIKE '%' || #{keyword} || '%' OR
				    (SELECT CM_NM FROM CMCODE WHERE CM_GROUP = 'position' AND CM_CODE = DTCODE) AS DTCODE_NM
				    (SELECT CM_NM FROM CMCODE WHERE CM_GROUP = 'spot' AND CM_CODE = PTN_CODE) AS PTN_CODE_NM
				    (SELECT CM_NM FROM CMCODE WHERE CM_GROUP = 'job' AND CM_CODE = JCODE) AS JCODE_NM
				    (SELECT CM_NM FROM CMCODE WHERE CM_GROUP = 'hobong' AND CM_CODE = GRD_CODE) AS GRD_CODE_NM
				    A.ENABLED 			LIKE '%' || #{keyword} || '%' OR
				    (SELECT CM_NM FROM CMCODE WHERE CM_GROUP = 'tenure' AND CM_CODE = ST_CLF_CD) AS ST_CLF_CD_NM	LIKE '%' || #{keyword} || '%' OR
				    A.EMP_SALARY		LIKE '%' || #{keyword} || '%' OR 	
				    (SELECT CM_NM FROM CMCODE WHERE CM_GROUP = 'workMethod' AND CM_CODE = WORK_METHOD_CODE) AS WORK_METHOD_CODE_NM	LIKE '%' || #{keyword} || '%' OR
				    B.DNM				LIKE '%' || #{keyword} || '%'
				)
		        </if>
	        </otherwise>
        </choose>
	</sql>
<!-- 사원 목록
	String keyword = "미션"
	
	WHERE 1 = 1은 늘 참(TRUE)임.
	조건이 2개 이상일 때 WHERE + AND + AND...
	조건이 1개일 때 WHERE이어야 함
	
	WHERE 조건1(생략)
	AND   조건2			=> 오류 발생
	
	==> 해결
	WHERE 1 = 1
	AND	  조건1(생략)
	AND   조건2			=> 정상
	
	 -->
	 <!-- 사원정보 전체 리스트 조회  -->
	<select id="selectEmpList" parameterType="PageVO" resultMap="empMap">
		WITH U AS(
	    	SELECT ROW_NUMBER() OVER(ORDER BY T.EMP_NO ASC) RNUM
		            , T.*
            FROM
		    (
				
		    SELECT A.EMP_NO,A.EMP_NM ,A.EMP_PASS ,A.GEN_CODE
		   ,(SELECT CM_NM FROM CMCODE WHERE CM_GROUP = 'gender' AND CM_CODE = GEN_CODE) AS GEN_CODE_NM
		   ,A.EMP_MAIL ,A.EMP_ADDR1 ,A.EMP_ADDR2 ,A.EMP_ADDR3 ,A.EMP_BRDT ,A.REGN
		   ,A.CP_NO,A.OFC_NO ,A.EMP_IMG ,A.BANK_CODE ,A.ACCT_NO
		   ,A.OWNER,   A.ENT_DATE ,A.OUT_DATE ,A.EMP_MM ,A.CTRT_CASE_CODE
		   ,(SELECT CM_NM FROM CMCODE WHERE CM_GROUP = 'contract' AND CM_CODE = CTRT_CASE_CODE) AS CTRT_CASE_NM
		   ,A.ACENTER ,A.DCODE
		   ,A.ENT_CASE_CODE
		   ,(SELECT CM_NM FROM CMCODE WHERE CM_GROUP = 'join' AND CM_CODE = ENT_CASE_CODE) AS ENT_CASE_NM
		   ,A.BS_WKTIME
		   ,A.DTCODE
		   ,(SELECT CM_NM FROM CMCODE WHERE CM_GROUP = 'position' AND CM_CODE = DTCODE) AS DTCODE_NM
		   ,A.PTN_CODE
		   ,(SELECT CM_NM FROM CMCODE WHERE CM_GROUP = 'spot' AND CM_CODE = PTN_CODE) AS PTN_CODE_NM
		   ,A.JCODE
		   ,(SELECT CM_NM FROM CMCODE WHERE CM_GROUP = 'job' AND CM_CODE = JCODE) AS JCODE_NM
		   ,A.GRD_CODE
		   ,(SELECT CM_NM FROM CMCODE WHERE CM_GROUP = 'hobong' AND CM_CODE = GRD_CODE) AS GRD_CODE_NM
		   ,A.ENABLED ,A.ST_CLF_CD
		   ,(SELECT CM_NM FROM CMCODE WHERE CM_GROUP = 'tenure' AND CM_CODE = ST_CLF_CD) AS ST_CLF_CD_NM
		   ,A.EMP_SALARY ,A.PROFILE_FILE_NO
		   ,A.SIGN_FILE_NO ,A.WORK_METHOD_CODE
		   ,(SELECT CM_NM FROM CMCODE WHERE CM_GROUP = 'workMethod' AND CM_CODE = WORK_METHOD_CODE) AS WORK_METHOD_CODE_NM
		   ,B.DNM
		   
			FROM EMP A LEFT JOIN DEPT B 
			ON A.DCODE = B.DCODE
			
			WHERE 1 = 1
			<include refid="where"></include>
			) T
		)
		SELECT  U.*
		FROM    U
		WHERE  U.RNUM BETWEEN #{startPage} AND #{endPage} 
	</select>
	
	<!-- 전체 글 수 조회, 파라미터는 없어도 가능함 -->
	<select id="getTotal" parameterType="PageVO"  resultType="int">
	    SELECT COUNT(*) 
	    FROM EMP A LEFT JOIN DEPT B 
			ON A.DCODE = B.DCODE
	    WHERE 1 = 1
	    <include refid="where"></include>
	</select>
	
	<!-- 1명의 급여정산번호 insert -->
	<insert id="insertPR" parameterType="SalaryCertVO">
		<selectKey resultType="int" order="BEFORE" keyProperty="scNo">
			SELECT (NVL(MAX(SC_NO),0) + 1) FROM SALARY_CERT
		</selectKey>
		INSERT INTO SALARY_CERT(SC_NO, EMP_NO, PT_NO, PR_YR, PR_MTH, PR_PDATE, PR_STL_NM)
		VALUES(#{scNo}, #{empNo}, #{ptNo}, #{prYr}, #{prMth}, #{prPdate}, #{prStlNm})
	</insert>
	
	<!-- 지급항목 확정 후 급여정산번호 update -->
	<update id="updatePayPR" parameterType="SalaryCertVO">
		UPDATE SALARY_CERT 
		SET PYTL_AMT=#{pytlAmt}
		WHERE SC_NO=#{scNo}
	</update>	
	
	<!-- 공제항목 확정 후 급여정산번호 update -->
	<update id="updateDedPR" parameterType="SalaryCertVO">
		UPDATE SALARY_CERT 
		SET DDTL_AMT=#{ddtlAmt}
		WHERE SC_NO=#{scNo}
	</update>	
	
	<!-- 정산대상자 명수 -->
	<select id="selectEmpCnt" parameterType="SalaryCertVO" resultType="int">
		SELECT COUNT(*) 
		FROM SALARY_CERT
		WHERE PR_YR=#{prYr} AND PR_MTH = #{prMth} AND PT_NO = #{ptNo}
	</select>
	
	<!-- salary_Cert 테이블에서 pt_no가 1번이고, pr_Yr, pr_Mth가 2023, 9인 사원 번호(String) 리스트를 찾기. -->
	<select id="selectCheckedEmpNoList" parameterType="SalaryCertVO" resultType="SalaryCertVO">
		SELECT E.EMP_NO, E.EMP_NM
		FROM EMP E INNER JOIN SALARY_CERT S
		ON E.EMP_NO = S.EMP_NO
		WHERE PR_YR=#{prYr} AND PR_MTH = #{prMth} AND PT_NO = #{ptNo}
	</select>
	
	<!-- 한사람의 기본급 가져오는 쿼리 select  -->	
	<select id="selectBaseSalary" parameterType="EmpVO" resultType="EmpVO">
		SELECT E.EMP_NO, E.EMP_NM, C.BCNT_AMT
		FROM EMP E
		INNER JOIN CNTHX C ON C.EMP_NO = E.EMP_NO
		WHERE E.EMP_NO = #{empNo}
		AND C.BWCT_SDATE = (
		    SELECT MAX(BWCT_SDATE)
		    FROM CNTHX
		    WHERE EMP_NO = #{empNo}
		)
	</select>


	<!-- 지급항목 - 기타수당 부분에 들어갈 내용 select -->
	<select id="selectPaySummary" parameterType="SalaryCertVO" resultType="PayDedVO">
		SELECT
			(SELECT EMP_NO FROM EMP WHERE EMP_NO = #{empNo}) as EMP_NO
			, (SELECT EMP_NM FROM EMP WHERE EMP_NO = #{empNo}) as EMP_NM
			, A.PTM_NO, A.PT_NO, A.PD_NO 
	        , B.PD_NO, B.PD_NM
	        , CASE WHEN B.PD_NM='기본급' THEN FN_GET_BASIC(#{empNo}) 
	                 WHEN B.PD_NM='초과근무수당' THEN FN_GET_EXTIME(#{prYr}, #{prMth}, #{empNo}) 
	                 ELSE B.PD_AMT END PD_AMT
	        , B.PD_EPN, B.PD_FML
	        , B.PD_YN, B.PD_LAW_YN, B.PD_TAX_YN, B.PD_TYPE
		FROM  PT_MAKE A, PAY_DED B
		WHERE A.PD_NO = B.PD_NO
		AND     PT_NO = #{ptNo} AND PD_TYPE='B0401' AND PD_LAW_YN='B0102'
		ORDER BY A.PTM_NO
	</select>
	
	<!-- 지급항목이력 추가 insert -->
	<insert id="insertPayHistory" parameterType="SalaryCertVO">
		INSERT INTO PD_HISTORY (PD_NO, SC_NO, PD_NM, PD_TYPE, PD_AMT)
		VALUES( #{pdNo}
			   ,(SELECT SC_NO FROM SALARY_CERT WHERE EMP_NO = #{empNo} AND PR_YR=#{prYr} AND PR_MTH=#{prMth} AND PT_NO=#{ptNo})
			   ,#{pdNm}, 'B0401', #{pdAmt});
	</insert>
	
	<!-- 공제항목 - 요약 부분에 들어갈 내용 select -->
<!-- 	<select id="selectDedSummary" parameterType="SalaryCertVO" resultType="PayDedVO"> -->
<!-- 		SELECT A.PTM_NO, A.PT_NO, A.PD_NO  -->
<!--         , B.PD_NO, B.PD_NM -->
<!--         , CASE WHEN B.PD_NM='기본급' THEN FN_GET_BASIC(#{empNo})  -->
<!--                  WHEN B.PD_NM='초과근무수당' THEN FN_GET_EXTIME(#{prYr}, #{prMth}, #{empNo})  -->
<!--                  ELSE B.PD_AMT END PD_AMT -->
<!--         , B.PD_EPN, B.PD_FML -->
<!--         , B.PD_YN, B.PD_LAW_YN, B.PD_TAX_YN, B.PD_TYPE -->
<!-- 		FROM  PT_MAKE A, PAY_DED B -->
<!-- 		WHERE A.PD_NO = B.PD_NO -->
<!-- 		AND     PT_NO = #{ptNo} AND PD_TYPE='B0402' -->
<!-- 		ORDER BY A.PTM_NO -->
<!-- 	</select> -->
	
	<!-- 기본급 계산 / 초과근무수당 - 연장, 야간, 휴일별 금액 각각 산출 -->
	<select id="selectOverTimePay" parameterType="SalaryCertVO" resultType="SalaryCertVO">
	
        WITH T AS
        ( SELECT E.EMP_NO, E.EMP_NM,
            SUM(WA_EXTIME) AS TOTAL_EXTIME, 
            SUM(WA_NIGHTIME) AS TOTAL_NIGHTIME, 
            SUM(HDTIME) AS TOTAL_HDTIME, 
        FN_GET_BASIC(#{empNo}) PD_AMT 
        FROM EMP E INNER JOIN WK_AP W 
        ON E.EMP_NO = W.WA_APER 
        WHERE EXTRACT(YEAR FROM WA_DATE)=#{prYr} AND EXTRACT(MONTH FROM WA_DATE)=#{prMth} AND W.WA_APER=#{empNo} AND EW_APST='승인' 
        GROUP BY E.EMP_NO, E.EMP_NM
        ) 
        SELECT  (SELECT EMP_NO FROM EMP WHERE EMP_NO = #{empNo}) as EMP_NO,
				(SELECT EMP_NM FROM EMP WHERE EMP_NO = #{empNo}) as EMP_NM,
                T.PD_AMT AS BASE_PAY,
                ROUND(T.PD_AMT/209) AS BASIC_HOUR_WAGE,
                (T.TOTAL_EXTIME + T.TOTAL_NIGHTIME + T.TOTAL_HDTIME) AS TOTAL_ADMIT_TIME,
                T.TOTAL_EXTIME,
                T.TOTAL_NIGHTIME,
                T.TOTAL_HDTIME,
                ROUND(ROUND(T.PD_AMT/209)*T.TOTAL_EXTIME*1.5) as OVERTIME_PAY, 
                ROUND(ROUND(T.PD_AMT/209)*T.TOTAL_NIGHTIME*1.5) as NIGHTIME_PAY, 
                ROUND(ROUND(T.PD_AMT/209)*T.TOTAL_HDTIME*1.5) as HDTIME_PAY,
                ((ROUND(ROUND(T.PD_AMT/209)*T.TOTAL_EXTIME*1.5) + ROUND(ROUND(T.PD_AMT/209)*T.TOTAL_NIGHTIME*1.5) +  ROUND(ROUND(T.PD_AMT/209)*T.TOTAL_HDTIME*1.5))) AS TOTAL_EX_PAY 
        FROM T
	</select>
	
	<!-- (ptNo, prYr, prMth는 세션에서 값 받기), pdNm은 div에서 추출, empNo는 for문 돌면서 한개씩 뽑아오기)
	버튼 클릭시 한개의 함수실행해서, 각각 ajax 실행하기. (기본급, 초과근무수당, 기타수당(항목별로)) 그러니까 메서드 다 각각각 실행. -->
	<!-- 정산 지급항목 이력 - 기본급 insert -->
	<insert id="insertBasePay" parameterType="SalaryCertVO">
		INSERT INTO PD_HISTORY(PD_NO, SC_NO, PD_NM, PD_TYPE, PD_AMT)
		VALUES( 1
       		   , (SELECT SC_NO FROM SALARY_CERT WHERE EMP_NO=#{empNo} AND PT_NO=#{ptNo} AND PR_YR=#{prYr} AND PR_MTH=#{prMth})
		       , #{pdNm}
		       , 'B0401'
       		   , ( SELECT SUM(C.BCNT_AMT)
            	   FROM EMP E INNER JOIN CNTHX C 
            	   ON C.EMP_NO = E.EMP_NO
	               WHERE E.EMP_NO = #{empNo}
	               AND C.BWCT_SDATE = (
						                SELECT MAX(D.BWCT_SDATE)
						                FROM CNTHX D
						                WHERE D.EMP_NO = E.EMP_NO))
        )
	</insert>
	
	<!-- 정산 지급항목 이력 - 초과근무수당 insert -->
	<insert id="insertOvertimePay" parameterType="SalaryCertVO">
		INSERT INTO PD_HISTORY(PD_NO, SC_NO, PD_NM, PD_TYPE, PD_AMT)
		VALUES( 3
		       , (SELECT SC_NO FROM SALARY_CERT WHERE EMP_NO=#{empNo} AND PT_NO=#{ptNo} AND PR_YR=#{prYr} AND PR_MTH=#{prMth})
		       , #{pdNm}
		       , 'B0401'
		       , ( WITH T AS
		            ( SELECT E.EMP_NO, E.EMP_NM,
		                SUM(WA_EXTIME) AS TOTAL_EXTIME, 
		                SUM(WA_NIGHTIME) AS TOTAL_NIGHTIME, 
		                SUM(HDTIME) AS TOTAL_HDTIME, 
		            FN_GET_BASIC(#{empNo}) PD_AMT 
		            FROM EMP E INNER JOIN WK_AP W 
		            ON E.EMP_NO = W.WA_APER 
		            WHERE EXTRACT(YEAR FROM WA_DATE)=#{prYr} AND EXTRACT(MONTH FROM WA_DATE)=#{prMth} AND W.WA_APER=#{empNo} AND EW_APST='승인' 
		            GROUP BY E.EMP_NO, E.EMP_NM
		            ) 
		            SELECT  
		                    ((ROUND(ROUND(T.PD_AMT/209)*T.TOTAL_EXTIME*1.5) + ROUND(ROUND(T.PD_AMT/209)*T.TOTAL_NIGHTIME*1.5) +  ROUND(ROUND(T.PD_AMT/209)*T.TOTAL_HDTIME*1.5))) AS TOTAL_EX_PAY 
		            FROM T )
        )
	</insert>
	
	<!-- 정산 지급항목 이력 - 기타수당 항목별로 insert -->
	<insert id="insertOtherPay" parameterType="SalaryCertVO">
		INSERT INTO PD_HISTORY(PD_NO, SC_NO, PD_NM, PD_TYPE, PD_AMT)
		VALUES( (SELECT PD_NO FROM PAY_DED WHERE PD_NM = #{pdNm})
		       , (SELECT SC_NO FROM SALARY_CERT WHERE EMP_NO=#{empNo} AND PT_NO=#{ptNo} AND PR_YR=#{prYr} AND PR_MTH=#{prMth})
		       , #{pdNm}
		       , 'B0401'
		       , #{pdAmt}
		)
	</insert>
</mapper>