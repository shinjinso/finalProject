package kr.or.ddit.salary.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.salary.service.PayDedService;
import kr.or.ddit.salary.vo.PayDedVO;
import kr.or.ddit.salary.vo.PayTplVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/salary")
@Controller
public class PayDedController {
	
	@Autowired 
	PayDedService payDedService;
	
	//지급항목 리스트 화면
	@GetMapping("/payList")
	public String payList(Model model) {
		//법정필수 항목
		List<PayDedVO> LawPDList = this.payDedService.selectLawPDList();
		//추가한 항목
		List<PayDedVO> AddedPDList = this.payDedService.selectAddedPDList();
		
		log.info("LawPDList : " + LawPDList);
		log.info("AddedPDList : " + AddedPDList);
		
		model.addAttribute("LawPDList", LawPDList);
		model.addAttribute("AddedPDList", AddedPDList);
		
		return "salary/payList";
	}
//	
//	@GetMapping("/payListAjax")
//	@ResponseBody
//	public List<PayDedVO> payListAjax() {
//		return payDedService.selectPDList();
//	}
	///////////////////////////////////////
	//지급항목 추가 화면
	@GetMapping("/payInsert")
	public String payInsert() {
		return "salary/payInsert";
	}
	
	//지급항목 추가 insert 처리 (form태그 post 전송)
	@PostMapping("/payInsert")
	public String payInsertPost(@ModelAttribute PayDedVO payDedVO, RedirectAttributes redirAttr) {
		log.info("payInsert 폼태그로 넘어온 값 : "+ payDedVO);
		int insertResult = this.payDedService.insertPD(payDedVO);
		log.info("payInsert DB처리 후 넘어온 값 : "+ payDedVO);
		log.info("payInsert 결과값" + insertResult);
		
		redirAttr.addFlashAttribute("insertResult"+ insertResult);//sweet alert창 띄우기 위해 result결과 보내기
		
		return "redirect:/salary/payList";
	}
	////////////////////////////////////////
	
	//지급항목 변경 input 화면
	@GetMapping("/payUpdate") 
	public String payUpdate(@RequestParam int pdNo, Model model) {
		log.info("get방식 payUpdate에 왔다");
		PayDedVO payDedVO = payDedService.selectPD(pdNo);
		
		model.addAttribute("data", payDedVO);
		
		
		return "salary/payUpdate";
	}
	
	//지급항목 변경 update 처리 (form태그 post 전송)
	@PutMapping("/payUpdate")
	public String payUpdatePut(@ModelAttribute PayDedVO payDedVO, RedirectAttributes redirAttr) {
		log.info("payUpdate 폼태그로 넘어온 값 : ", payDedVO);
		int updateResult = this.payDedService.updatePD(payDedVO);
		log.info("payUpdate DB처리 후 넘어온 값 : ", payDedVO);
		log.info("payUpdate 결과값" + updateResult);
		
		redirAttr.addFlashAttribute("updateResult", updateResult);//sweet alert창 띄우기 위해 result결과 보내기
		
		return "redirect:/salary/payList";
	}
	////////////////////////////////////////
	
	//지급항목 삭제 delete 처리 
	@DeleteMapping("/payDelete")
	@ResponseBody
	public String payDelete(@RequestBody PayDedVO payDedVO) {
		
		log.info("payDedVO 삭제 전 : " + payDedVO);
		int result =  payDedService.deletePD(payDedVO);
		
		log.info("payDedVO 삭제 후 : " + payDedVO);
		
		if(result>0) {//성공
			return "success";
		}else {
			return "fail";
		}
	}
	
	////////////////////////////////////////
	//공제항목 리스트 화면
	@GetMapping("/dedList")
	public String dedList() {
		return "salary/dedList";
	}
	
	@PostMapping("/dedListPost")
	public String dedListPost() {
		return "salary/dedListPost";
	}
	
	//공제항목 추가 화면
	@GetMapping("/dedInsert")
	public String dedInsert() {
		return "salary/dedInsert";
	}
	
	//공제항목 변경 화면
	@GetMapping("/dedUpdate")
	public String dedUpdate() {
		return "salary/dedUpdate";
	}
	
	////////////////////////////////////////////
	//toggleData : {"pdNo":"3","isChecked":true,"ptNo":"2"}
	//지급공제항목 토글 on insert 추가	
	@ResponseBody
	@PostMapping("/togglePDItem")
	public String inDelPTM(@RequestBody PayDedVO payDedVO) {
		//PayDedVO(pdNo=3, pdNm=null, pdAmt=0, pdEpn=null, pdFml=null, pdYn=null, pdLawYn=null, pdTaxYn=null
		//, pdType=null, isChecked=true, ptNo=2)
		//* isChecked=true(insert) / isChecked=false(delete)
		log.info("payDedVO ajax 넘어온 값 : " + payDedVO);
		
		int result =  0;
		if(payDedVO.getIsChecked().equals("true")) {
			log.info("체크결과 : " + payDedVO.getIsChecked());
			//insert수행
			result = payDedService.insertPTM(payDedVO);
			log.info("insertPTM 결과값 : " + result);
		}else {
			//delete 수행
			log.info("deletePTM 결과값: " + result);
			result = payDedService.deletePTM(payDedVO);
		}
		
		if(result>0) {//성공
			payDedVO.setPdYn("B0101");
			
			payDedService.updatePdYn(payDedVO);
			
			return "success";
		}else {
			payDedVO.setPdYn("B0102");
			
			payDedService.updatePdYn(payDedVO);
			
			return "fail";
		}
	}
	
//	//지급공제항목 토글 off delete 삭제
//	@ResponseBody
//	@DeleteMapping("/togglePDItem")
//	public String deletePTM(@RequestBody PayDedVO payDedVO ) {
//		log.info("payDedVO 삭제 전 : " + payDedVO);
//		int result =  payDedService.deletePD(payDedVO);
//		
//		log.info("payDedVO 삭제 후 : " + payDedVO);
//		
//		if(result>0) {//성공
//			return "success";
//		}else {
//			return "fail";
//		}
//	}
}
